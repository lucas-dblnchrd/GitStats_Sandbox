name: Set issue status in a project
inputs:
  github-token:
    description: The GitHub token used to create an authenticated client
    required: true
    default: ${{ github.token }}
  project-id:
    description: Project id. You can get it with the `get-project-statuses` action
    required: true
  item-id:
    description: Item id (issue id in the project). You can get it with the `add-issue-to-project` action
    required: true
  field-id:
    description: Id of the "status" field in the project. You can get it with the `get-project-statuses` action
    required: true
  option-id:
    description: Id of the status value to select. You can get it with the `add-issue-to-project` action
    required: true
outputs:
  result:
    description: |
      A description of the updated item in your project.
      It's a JSON document of the form:
      {
        "id": "<item ID>",
        "statusFieldValue": {
            "name": "<current status>",
            "optionId": "<option ID>"
        }
      }
    value: ${{ toJSON(fromJSON(steps.set-issue-status.outputs.data).projectV2Item) }}
runs:
  using: composite
  steps:
    - name: Set issue status
      id: set-issue-status
      uses: octokit/graphql-action@v2.x
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        query: |
          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
            updateProjectV2ItemFieldValue(input: {
              projectId: $projectId,
              itemId: $itemId,
              fieldId: $fieldId,
              value: { 
                singleSelectOptionId: $optionId
              }
            }) {
              projectV2Item {
                id,
                statusFieldValue: fieldValueByName(name: "Status") {
                  ... on ProjectV2ItemFieldSingleSelectValue {
                    name,
                    optionId
                  }
                }
              }
            }
          }
        variables: |
          projectId: ${{ inputs.project-id }}
          itemId: ${{ inputs.item-id }}
          fieldId: ${{ inputs.field-id }}
          optionId: ${{ inputs.option-id }}
