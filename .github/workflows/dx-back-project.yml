name: Add issues to dx-back project

on:
  issues:
    types:
      - labeled

env:
  DX_BACK_PROJECT_NUMBER: 42

jobs:
  add-issue-to-dx-back-project:
    if: | 
        github.event.issue.state == 'open' &&
        github.event.label.name == 's:dx-back'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Generate token
        id: generate-token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        with:
          app_id: ${{ secrets.AUTHENTICATOR_APP_ID }}
          private_key: ${{ secrets.AUTHENTICATOR_APP_PEM }}

      - name: Get project statuses
        id: get-project-statuses
        uses: ./.github/reusable-actions/get-project-statuses
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          project-number: ${{ env.DX_BACK_PROJECT_NUMBER }}

      - name: Add issue to project
        id: add-issue-to-project
        uses: ./.github/reusable-actions/add-issue-to-project
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          project-id: ${{ fromJSON(steps.get-project-statuses.outputs.result).id }}
          issue-node-id: ${{ github.event.issue.node_id }}

      - name: Compute issue status
        id: compute-issue-status
        uses: actions/github-script@v6
        if: fromJson(steps.add-issue-to-project.outputs.result).statusFieldValue == null
        env:
          PROJECT_DATA: ${{ steps.get-project-statuses.outputs.result }}
          ISSUE_DATA: ${{ steps.add-issue-to-project.outputs.result }}
        with:
          script: |
            const projectData = JSON.parse(process.env.PROJECT_DATA);
            const expectedStatus = context.payload.issue.labels.map(({ name }) => name).includes("bug") ? "Ready to dev" : "Inbox"
            const expectedStatusId = projectData.statusField.options.find(({ name }) => name === expectedStatus)?.id;
            return expectedStatusId;

      - name: Set issue status
        uses: ./.github/reusable-actions/set-issue-status-in-project
        if: steps.compute-issue-status.outputs.result
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          project-id: ${{ fromJSON(steps.get-project-statuses.outputs.result).id }}
          item-id: ${{ fromJSON(steps.add-issue-to-project.outputs.result).id }}
          field-id: ${{ fromJSON(steps.get-project-statuses.outputs.result).statusField.id }}
          option-id: ${{ fromJSON(steps.compute-issue-status.outputs.result) }}
