name: Add issues to dx-back project

on:
  issues:
    types:
      - labeled

jobs:
  add-issue-to-dx-back-project:
    if: | 
        github.event.issue.state == 'open' &&
        github.event.label.name == 's:dx-back'
    runs-on: ubuntu-latest
    steps:

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        with:
          app_id: ${{ secrets.AUTHENTICATOR_APP_ID }}
          private_key: ${{ secrets.AUTHENTICATOR_APP_PEM }}

      - uses: actions/github-script@v6
        name: Get project data
        id: get_project_data
        env:
          ORGANIZATION: 360Learning
          PROJECT_NUMBER: 42
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const query = `query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  statusField: field(name:"Status") {
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }`;
            const variables = {
              org: process.env.ORGANIZATION,
              number: parseInt(process.env.PROJECT_NUMBER, 10)
            };
            return (await github.graphql(query, variables)).organization.projectV2;

      - name: Print result
        env:
          GRAPHQL_RESULT: ${{ steps.get_project_data.outputs.result }}
        run: |
          echo GRAPHQL RESULT = $GRAPHQL_RESULT
          echo EVENT NAME: $GITHUB_EVENT_NAME
          echo EVENT PAYLOAD:
          cat $GITHUB_EVENT_PATH

      - uses: actions/github-script@v6
        name: Add issue to project
        id: add_issue_to_project
        env:
          PROJECT_DATA: ${{ steps.get_project_data.outputs.result }}
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const projectData = JSON.parse(process.env.PROJECT_DATA);
            const issue = context.payload.issue;
            const query = `mutation($projectId: ID!, $issueId: ID!) {
              addProjectV2ItemById(input: { projectId: $projectId, contentId: $issueId }) {
                item {
                  id,
                  statusFieldValue: fieldValueByName(name: "Status") {
                    ... on ProjectV2ItemFieldSingleSelectValue {
                      name,
                      optionId
                    }
                  }
                }
              }
            }`;
            const variables = {
              projectId: projectData.id,
              issueId: issue.node_id
            };
            return (await github.graphql(query, variables)).addProjectV2ItemById.item;

      - name: Print created item
        env:
          GRAPHQL_RESULT: ${{ steps.add_issue_to_project.outputs.result }}
        run: |
          echo GRAPHQL RESULT = $GRAPHQL_RESULT

      - uses: actions/github-script@v6
        name: Set issue status
        if: fromJson(steps.add_issue_to_project.outputs.result).statusFieldValue == null
        env:
          PROJECT_DATA: ${{ steps.get_project_data.outputs.result }}
          ISSUE_DATA: ${{ steps.add_issue_to_project.outputs.result }}
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const projectData = JSON.parse(process.env.PROJECT_DATA);
            const issueData = JSON.parse(process.env.ISSUE_DATA);
            const issue = context.payload.issue;
            const expectedStatus = issue.labels.map(({ name }) => name).includes("bug") ? "Ready to dev" : "Inbox"
            const expectedStatusId = projectData.statusField.options.find(({ name }) => name === expectedStatus)?.id;
            console.log("EXPECTED STATUS: ", expectedStatus, "with id", expectedStatusId);
            if (expectedStatusId) {
              const query = `mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { 
                    singleSelectOptionId: $optionId
                  }
                }) {
                  projectV2Item {
                    id,
                    statusFieldValue: fieldValueByName(name: "Status") {
                      ... on ProjectV2ItemFieldSingleSelectValue {
                        name,
                        optionId
                      }
                    }
                  }
                }
              }`;
              const variables = {
                projectId: projectData.id,
                itemId: issueData.id,
                fieldId: projectData.statusField.id,
                optionId: expectedStatusId
              };
              return await github.graphql(query, variables);
            }
