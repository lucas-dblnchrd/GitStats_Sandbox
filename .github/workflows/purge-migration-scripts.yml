# This GitHub Action purges old migration scripts (files in packages/backend/zscripts/migrations).
#
#
# This action triggers once a month.
# It executes the following steps:
# - create a new branch
# - delete old scripts
# - commit
# - create a PR
# - auto-merge it


name: Purge migration scripts

on:
  workflow_dispatch:

env:
  BASE: master
  BRANCH_NAME: purge-migrations-scripts/${{ github.run_id }}
  PURGE_DAYS: 61

jobs:
  purge_migration_scripts:
    runs-on: ubuntu-latest
    steps:
      - name: Generate an access token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.AUTHENTICATOR_APP_ID }}
          private_key: ${{ secrets.AUTHENTICATOR_APP_PEM }}

      - uses: actions/checkout@v4
        with:
            ref: ${{ env.BASE }}

      - name: Delete old files
        run: |
          limit=$( date -d "$PURGE_DAYS days ago" +%Y%m%dT%H%M%SZ- )
          pattern="^[0-9]{8}T[0-9]{6}Z-"
          for file in *; do
            if [[ $file =~ $pattern && $file < $limit ]]; then
              rm $file
            fi
          done
        working-directory: ${{ github.workspace }}/packages/backend/zscripts/migrations

      - name: Commit in new branch
        id: commit-in-branch
        uses: ./.github/reusable-actions/commit-in-branch
        with:
          branch-name: ${{ env.BRANCH_NAME }}
          commit-message: |
            Purge migration
            scripts older than ${{ env.PURGE_DAYS }} days
            escaping $( echo special ) metacharacters
            for the shell...

      - name: Create pull request
        if: ${{ steps.commit-in-branch.outputs.created == 'true' }}
        uses: ./.github/reusable-actions/create-pull-request
        with:
          head: ${{ env.BRANCH_NAME }}
          base: ${{ env.BASE }}
          title: "chore(migrations): purge old migration scripts"
          body: |
            ### Manual
            - Code Owners' reviews are not required.
            - The PR will be auto-merged by the bot.
            - If there is a merge conflict,
              - Check if it comes from a previous Gitflow PR and if someone already handled it.
                https://github.com/360Learning/platform/pulls?q=is%3Apr+is%3Aopen+in%3Atitle+chore%28gitflow%29%3A
                No need to handle the merge conflict twice. Once the other PR is merged, it will unblock this PR.
              - If it comes from this PR, @${{ github.actor }} handles it
                ```
                git checkout ${{ env.BASE }}
                git pull
                git checkout ${{ env.BRANCH_NAME }}
                git merge ${{ env.BASE }}
                # handle the merge conflict
                git push
                ```
            - If there is a pipeline error, @${{ github.actor }} fixes it on `${{ env.BRANCH_NAME }}`.
          reviewers: '["LucVidal360"]'
          auto-merge: false
          github-token: ${{ steps.generate_token.outputs.token }}
