name: Add an issue to a project
inputs:
  github-token:
    description: The GitHub token used to create an authenticated client
    required: true
    default: ${{ github.token }}
  project-id:
    description: The project's ID
    required: true
  issue-node-id:
    description: The issue's `node_id`. Available in e.g. `github.event.issue`
    required: true
outputs:
  result:
    description: |
      A description of the new or previously existing item in your project.
      It's a JSON document of the form:
      {
        "id": "<item ID>",
        "statusFieldValue": {
            "name": "<current status>",
            "optionId": "<option ID>"
        }
      }
      If the item is new, statusFieldValue == null
    value: ${{ steps.add-issue-to-project.outputs.result }}
runs:
  using: composite
  steps:
    - name: Add issue to project
      id: add-issue-to-project
      uses: actions/github-script@v6
      env:
        PROJECT_ID: ${{ inputs.project-id }}
        ISSUE_NODE_ID: ${{ inputs.issue-node-id }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const query = `mutation($projectId: ID!, $issueId: ID!) {
            addProjectV2ItemById(input: { projectId: $projectId, contentId: $issueId }) {
              item {
                id,
                statusFieldValue: fieldValueByName(name: "Status") {
                  ... on ProjectV2ItemFieldSingleSelectValue {
                    name,
                    optionId
                  }
                }
              }
            }
          }`;
          const variables = {
            projectId: process.env.PROJECT_ID,
            issueId: process.env.ISSUE_NODE_ID
          };
          return (await github.graphql(query, variables)).addProjectV2ItemById.item;
