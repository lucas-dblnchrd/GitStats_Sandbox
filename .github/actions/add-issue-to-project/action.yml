name: Add an issue to a project
inputs:
  github-token:
    description: The GitHub token used to create an authenticated client
    required: true
    default: ${{ github.token }}
  project-id:
    description: The project's ID
    required: true
  issue-node-id:
    description: The issue's `node_id`. Available in e.g. `github.event.issue`
    required: true
outputs:
  result:
    description: |
      A description of the new or previously existing item in your project.
      It's a JSON document of the form:
      {
        "id": "<item ID>",
        "statusFieldValue": {
            "name": "<current status>",
            "optionId": "<option ID>"
        }
      }
      If the item is new, statusFieldValue == null
    value: ${{ toJSON(fromJSON(steps.add-issue-to-project.outputs.data).addProjectV2ItemById.item) }}
runs:
  using: composite
  steps:
    - name: Add issue to project
      id: add-issue-to-project
      uses: octokit/graphql-action@v2.x
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        query: |
          mutation($projectId: ID!, $contentId: ID!) {
            addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
              item {
                id,
                statusFieldValue: fieldValueByName(name: "Status") {
                  ... on ProjectV2ItemFieldSingleSelectValue {
                    name,
                    optionId
                  }
                }
              }
            }
          }
        variables: |
          projectId: ${{ inputs.project-id }}
          contentId: ${{ inputs.issue-node-id }}
